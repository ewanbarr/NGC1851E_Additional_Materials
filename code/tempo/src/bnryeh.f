c      $Id$
      SUBROUTINE BNRYEH(TORB,N,FCTN)

C  SUBROUTINE BINARY  --  J. H. TAYLOR,  PRINCETON UNIVERSITY.
C    (EPSTEIN-HAUGAN FORMULAE)

C  COMPUTES PULSAR PROPER TIME, TP, AT TIME OF OBSERVATION T=CT(N)-CT(1)
C  THE NOTATION USED HERE FOLLOWS CLOSELY THAT OF R. EPSTEIN (ASTROPHYSICAL
C  JOURNAL 216, 92, 1977).  UNITS ARE SUCH THAT C=G=1. THUS MASSES HAVE UNITS
C  OF SECONDS, WITH ONE SOLAR MASS = 4.925490947 usec.

C  ALSO COMPUTES THE BINARY ORBIT-RELATED VALUES OF FCTN, WHICH IS USED IN
C  EVALUATING THE COVARIANCE MATRIX FOR LEAST-SQUARES FITTING OF PARAMETERS.

C  INITIAL GUESSES FOR ALL PARAMETERS MUST BE PLACED IN COMMON/ORBIT/ BY THE
C  CALLING PROGRAM.  REALISTIC VALUES OF SIN(I) AND GAMMA ARE (FOR PSR 1913+16)
C  SUCH THAT SI LIES BETWEEN 0.36 AND 1.0, GAMMA BETWEEN 0.003 AND 0.012 SEC.

C  NOTE THAT THE SYMBOL A1 IS USED TO REPRESENT THE QUANTITY A1*SIN(I), WHICH
C  EPSTEIN CALLS X. OTHER SYMBOLS MEAN WHAT THEY MNEMONICALLY SUGGEST.
      IMPLICIT REAL*8 (A-H,O-Z)
	include 'dim.h'
      REAL*8 FCTN(NPAP1)
	parameter (TWOPI=6.28318530717958648d0,SUNMASS=4.925490947d-6)
	parameter (RAD=360.d0/twopi)
	include 'dp.h'
	include 'orbit.h'

C  THIS P IS THE SCRIPT P IN EPSTEIN:
      TT0=CT-t0(1)
      P=pb(1)/TWOPI
      X=a1(1)+xdot*tt0
      ecc=e(1)+edot*tt0
      E2=ecc*ecc
      ESQ=1.D0-E2
      ESQRT=DSQRT(ESQ)
      ESQ2=ESQ*ESQ
      E4=E2*E2
      GSQOE=GAMMA*SI*SI/ecc
      XXOP=X*X/P

C  CALCULATE MASSES FROM GAMMA AND SIN(I).
      AM2=(GSQOE-XXOP)**2 / (X*SI**3)
      AM1=AM2*(GSQOE/XXOP - 2.D0)
      AM=AM1+AM2
      if(n.eq.1) WRITE(31,1006) AM1/SUNMASS,AM2/SUNMASS,AM/SUNMASS
1006  FORMAT(' From gamma and sin i:  m1=',F7.4,'   m2=',F7.4,
     +  '   M=',f7.4)
      AMU=AM1*AM2/AM
      AMUOM=AMU/AM
      SMA=X*AM/(AM2*SI)
      SMG=ecc*(1.D0+(AM/(2.*SMA*ESQ2))*((18.D0-E2-6.D0*E4) -
     +  (4.D0+11.D0*E2-7.D0*E4)*AMUOM))
      SMH=E2*AM/(4.D0*SMA*ESQ2)*((-13.D0+2.D0*E2)+(3.D0+5.D0*E2)*AMUOM)
      SMF=SMH
      DELTAE=ecc*AM/(4.D0*SMA*ESQ2)*((13.D0-2.D0*E2)*(2.D0-E2) -
     +  (8.D0+3.D0*E2-3.D0*E4)*AMUOM)-ecc*(AM1-AM2)*AM1/(2.D0*AM*SMA)
      X2SI3=X*X*SI**3
      DM2=(AM2/SI)*(GSQOE+3.D0*XXOP)/(GSQOE-XXOP)
      DMOA=(2.D0/X2SI3)*(GSQOE**2 - XXOP**2)
      DMUOA=4.D0*XXOP/(P*SI**3)
      DDMM1=(2.D0/X2SI3)*(GSQOE**2 - 6.D0*XXOP**2)
      DG=(ecc/(2.D0*ESQ2))*((18.D0-E2-6.D0*E4)*DMOA -
     +  (4.D0+11.D0*E2-7.D0 * E4) * DMUOA)
      DF=(E2/(4.D0*ESQ2))*(-(13.D0-2.D0*E2)*DMOA+(3.D0+5.D0*E2)*DMUOA)
      DH=DF
      DDE=(ecc/2.D0)*(((13.D0-2.D0*E2)*(2.D0-E2)*DMOA -
     +  (8.D0+3.D0*E2-3.D0*E4)*DMUOA) / (2.D0*ESQ2) - DDMM1)

C  COMPUTE TIME-DEPENDENT QUANTITIES.

      OMEGA=(omz(1)+OMDOT*TT0/365.25D0)/RAD
      TPB=TT0*86400.D0/pb(1)
      PHASE=TWOPI*DMOD(TPB-0.5D0*PBDOT*TPB*TPB,1.0D0)
	if(phase.lt.0.d0) phase=phase+twopi
      EP=PHASE+SMG*DSIN(PHASE)*(1.D0+ecc*DCOS(PHASE))
      DENOM=1.D0-ecc*DCOS(EP)
20    DEP=(PHASE-(EP-SMG*DSIN(EP)-SMH*SIN(SNGL(EP+EP))))/DENOM
      EP=EP+DEP
      IF(DABS(DEP).GT.1.D-12) GO TO 20

C     CALCULATE TRUE ANOMALY:

      SQEOE=DSQRT( (1.D0+ecc)/(1.D0-ecc)  )
      TRUANM=2.*DATAN(SQEOE*DTAN(EP/2.))
      IF(TRUANM .LT. 0.D0) TRUANM=TRUANM+TWOPI

C     CALCULATE (TRUE ANOMALY) - (MEAN ANOMALY):

      TRUMIM=TRUANM-PHASE

C     CALCULATE SEMILATUS RECTUM:

      SEMLAT=a1(1)*AM*ESQ/(SI*AM2)
      THRMOP=3.*AM/SEMLAT
      ALPHA=X*DSIN(OMEGA)
      BETA=X*DCOS(OMEGA)*ESQRT
      CE=DCOS(EP)
      SE=DSIN(EP)
      CEME=CE-ecc
      QE=1.D0-ecc*CE
      ASE=ALPHA*SE
      BSE=BETA*SE
      ACE=ALPHA*CE
      BCE=BETA*CE
      QAB=ALPHA*CEME+BSE

C  Compute TORB for TP=T+TORB = proper time in pulsar frame: Epstein eqn (A-22)

      DBLBRK=(ACE+BSE)*QAB-(ASE-BCE)*(2.D0*(ASE-BCE)+ecc*SE/QE * QAB)
      BIGPAR=((BETA+GAMMA)/P+DELTAE)*CE-ASE/P+SMF*DCOS(2.D0*EP) +
     +  DBLBRK/(2.D0*P*P*QE)
      BRACE=QE-SI*(ESQRT*SE*DCOS(OMEGA)+CEME*DSIN(OMEGA))
      HAUGB1=CEME*DCOS(OMEGA)-ESQRT*SE*DSIN(OMEGA)
      HAUG22=-a1(1)*THRMOP*TRUMIM*HAUGB1
      if(nbin.eq.5) HAUG22=-a1(1)*(omdot/(RAD*365.25*86400.d0)) *
     +  p*TRUMIM*HAUGB1
      TORB=-ALPHA*CEME-(BETA+GAMMA)*SE+2.D0*AM2*DLOG(BRACE) +
     +  QAB*BIGPAR/QE + HAUG22
      V=(ASE-BCE)/QE
      W=QAB/QE
      BRK1=QE*(1.D0-SI*W/X)
      BRK2=DG*SE+DH*DSIN(2.D0*EP)
      BRK3=DDE*CE+DF*DCOS(2.D0*EP)

C  COMPUTE PARAMETERS FOR LEAST-SQUARES FITTING PROCEDURE.

	tt0=tt0*86400.d0
      FCTN(9)=(QAB/X)*F0
      FCTN(10)=(-ALPHA-(V+ecc*BETA/ESQ)*SE)*F0
      FCTN(11)=V*F0*86400.d0/P
      FCTN(12)=fctn(11)*tt0/(pb(1)*86400.d0)
      FCTN(13)=ESQRT*(BETA*CEME/ESQ-ASE)*F0
      FCTN(14)=tt0*FCTN(13)/(RAD*365.25d0*86400.d0)
      FCTN(15)=SE*F0
      FCTN(18)=0.5d-6*tt0*FCTN(12)
      HAUGB2=(3./ESQ)*(AM2 + DM2*SI)*TRUMIM
      HAUG26=HAUGB1*HAUGB2
	if(nbin.eq.5) haug26=0.
      FCTN(20)=-(2.D0*DM2*DLOG(BRK1)-2.D0*AM2*W/(X-W*SI)+V*BRK2+W*BRK3
     + -HAUG26)*F0
	fctn(24)=tt0*fctn(9)
	fctn(25)=tt0*fctn(10)
	am=am/SUNMASS
	am2=am2/SUNMASS
      RETURN
      END
